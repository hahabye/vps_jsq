name: Build and Release

on:
  push:
    branches: [ "main" ]
    #tags: [ 'v*.*.*' ]
    #paths:
    #  - 'dist/**'
  workflow_dispatch:

jobs:

  check:
    runs-on: ubuntu-latest
    outputs:
      bui: ${{ steps.tag.outputs.build }}
      tag: ${{ steps.tag.outputs.tag }}
      ver: ${{ steps.tag.outputs.ver }}

    steps:
    - name: Log workflow trigger time
      run: |
        echo "Workflow triggered at $(date -u)"
        echo "Event name: $GITHUB_EVENT_NAME"
        echo "Actor: $GITHUB_ACTOR"
    
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - id: latest
      name: Get latest app version
      run: |
        # 获取最新版本号
        LATEST_TAG=$(curl -s https://api.github.com/repos/hahabye/vps_jsq/releases/latest | jq -r .tag_name)
        echo "tag=$LATEST_TAG" >> $GITHUB_OUTPUT
        echo "Fetched latest app version: $LATEST_TAG"
    
    - id: current
      name: Get latest tags version
      run: |
        # 获取当前仓库的最新标签
        if git tag | grep -q .; then
          CURRENT_TAG=$(git tag | sort -V | tail -n1)
          echo "tag=$CURRENT_TAG" >> $GITHUB_OUTPUT
          echo "Current repository tag: $CURRENT_TAG"
        else
          echo "tag=none" >> $GITHUB_OUTPUT
          echo "No existing tags found in repository"
        fi
    
    - id: tag
      name: Compare and create tag
      run: |
        latest="${{ steps.latest.outputs.tag }}"
        current="${{ steps.current.outputs.tag }}"
        echo "Latest version: $latest"
        echo "Current version: $current"
        
        # 检查是否需要创建新标签
        if [ "$latest" != "$current" ]; then
          if ! git ls-remote --tags origin | grep -q "refs/tags/$latest"; then
            echo "Creating new tag: $latest"
            git config user.name github-actions
            git config user.email github-actions@users.noreply.github.com
            git tag "$latest"
            git push origin "$latest"
            echo "Successfully pushed new tag: $latest"
          else
            echo "Tag $latest already exists, skipping creation"
          fi
          echo "tag=$latest" >> $GITHUB_OUTPUT
          echo "ver=${latest#v}" >> $GITHUB_OUTPUT
          echo "build=true" >> $GITHUB_OUTPUT
          echo "Build flag set to TRUE - build will proceed"
        else
          echo "Same version detected: $latest = $current"
          echo "build=false" >> $GITHUB_OUTPUT
          echo "Build flag set to FALSE - build will be skipped"
        fi
    
    - name: Summary of check task
      run: |
        echo "=============== CHECK TASK SUMMARY ==============="
        echo "Timestamp: $(date -u)"
        echo "Latest app version: ${{ steps.latest.outputs.tag }}"
        echo "Current repo version: ${{ steps.current.outputs.tag }}"
        echo "Build required: ${{ steps.tag.outputs.build }}"
        echo "=================================================="


  build:
    strategy:
      fail-fast: false
      matrix:
        # os: [ubuntu-latest, macos-latest]
        os: [ubuntu-latest]

    runs-on: ${{ matrix.os }}
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js env
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Initialize Vite project
        run: |
          npm create vite@latest vite-app -- --template vanilla
          cp vite-app/package.json .
          npm install vite --save-dev

      - name: Install dependencies
        run: |
          npm install
          cat package.json

      - name: Build for Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          # tar
          echo "$(date +'%Y-%m-%dT%H:%M:%S%z')" > dist/build.txt
          cd dist && tar -czvf ../vps_jsq.tar.gz * && cd ..
          cp vps_jsq.tar.gz dist/
          # release files          
          echo "/////////////////// dist  list ///////////////////"
          ls -Alh dist

      # https://github.com/actions/upload-artifact
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.os }}
          path: |
            dist/vps_jsq.tar.gz
            dist/build.txt
          retention-days: 1

  release:
    needs: build
    runs-on: ubuntu-latest
    #if: github.event_name == 'push' && (startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main')
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          # binaries-${{ matrix.os }}
          name: binaries-ubuntu-latest
          path: artifacts

      - name: Prepare release files
        run: |
          ls -al
          ls artifacts -al
          mkdir -p release
          cp -f artifacts/* release/ || true
          cd release
          echo "文件列表(release):"
          ls -al

      - name: Delete existing latest tag
        if: github.ref == 'refs/heads/main'
        run: |
          git fetch --tags
          if git rev-parse --verify refs/tags/latest >/dev/null 2>&1; then
            echo "Deleting existing latest tag..."
            git tag -d latest
            git push origin :refs/tags/latest
          else
            echo "No existing latest tag."
          fi

      # https://github.com/softprops/action-gh-release
      # 由 main 分支触发的 Action，{{ github.ref_name }} 的值是 refs/heads/main
      # tag_name: ${{ github.ref_name }}
      - name: Create Latest Release
        uses: softprops/action-gh-release@v2
        if: github.ref == 'refs/heads/main'
        with:
          tag_name: "latest"
          name: "Release latest"
          files: release/*
          draft: false
          prerelease: false          
          generate_release_notes: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Log build completion
        run: echo "Build and release completed at $(date -u)"